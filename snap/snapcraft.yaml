name: mcp-juju
base: core24
version: '0.0.2'
summary: MCP server for Juju management and automation
description: |
  MCP Juju is a Model Context Protocol (MCP) server that provides integration
  with Juju (Ubuntu's application modeling tool). This server exposes Juju 
  functionality through MCP tools, allowing AI assistants like Claude to manage
  Juju controllers, models, and applications through 100+ Juju CLI commands.
  
  The server supports both HTTP and stdio communication modes, making it flexible
  for different deployment scenarios. It converts all Juju CLI commands into 
  MCP tools with automatic flag detection and enhanced descriptions.
  
  **Key Features:**
  - Support for all Juju commands functionality as MCP tools
  - HTTP and stdio server modes
  - Automatic parameter type detection from Juju command flags  
  - Enhanced command descriptions from Juju documentation
  - Context-aware operations with cancellation support
  - Structured logging with configurable levels
  
  **Requirements:**
  - Juju 3.6 (currently supported version)
  - Network access for MCP communication
  - Appropriate Juju credentials and access permissions

grade: stable
confinement: strict

apps:
  # HTTP MCP server (default)
  mcp-juju:
    command: bin/mcp-juju
    plugs:
      - network
      - network-bind
      - ssh-keys
      - removable-media
      - lxd
      # Needed to read the JAAS plugin binary
      - jaas-plugin
      # Needed so that juju can still use the real ~/.local/share/juju.
      - dot-local-share-juju
      # Needed to read lxd config.
      - config-lxd
      # Needed to read ~/.kube, ~/.novarc, ~/.aws etc.
      - dot-aws
      - dot-azure
      - dot-google
      - dot-kubernetes
      - dot-maas
      - dot-openstack
      - dot-oracle
      # Needed so that arbitrary cloud/credential yaml files can be read and backups written.
      - home
      # Needed to that SSO via the web browser can work.
      - desktop
    environment:
      PATH: $SNAP/bin:$PATH
      JUJU_DATA: $SNAP_REAL_HOME/.local/share/juju

  # Daemon service for HTTP server
  mcp-juju-daemon:
    command: bin/mcp-juju --server-type http
    daemon: simple
    daemon-scope: user
    restart-condition: on-abnormal
    plugs:
      - network
      - network-bind
      - ssh-keys
      - lxd
      # Needed to read the JAAS plugin binary
      - jaas-plugin
      # Needed so that juju can still use the real ~/.local/share/juju.
      - dot-local-share-juju
      # Needed to read lxd config.
      - config-lxd
      # Needed to read ~/.kube, ~/.novarc, ~/.aws etc.
      - dot-aws
      - dot-azure
      - dot-google
      - dot-kubernetes
      - dot-maas
      - dot-openstack
      - dot-oracle
      # Needed so that arbitrary cloud/credential yaml files can be read and backups written.
      - home
      # Needed to that SSO via the web browser can work.
      - desktop
    environment:
      PATH: $SNAP/bin:$PATH
      JUJU_DATA: $SNAP_REAL_HOME/.local/share/juju

parts:
  mcp-juju:
    plugin: go
    build-snaps: [go/latest/stable]
    source: .
    build-environment:
      - CGO_ENABLED: "0"
      - GOOS: linux
      - GOARCH: $CRAFT_ARCH_BUILD_FOR
    
    # Stage packages for dependencies
    stage-packages:
      - ca-certificates
      - openssh-client

slots:
  mcp-server:
    interface: content
    content: mcp-server
    read:
      - $SNAP/bin

plugs:
  peers:
    interface: content
    content: microk8s
    target: $SNAP_DATA/microk8s

  jaas-plugin:
    interface: content
    content: jaas-plugin
    target: $SNAP/opt/jaas/bin
  dot-local-share-juju:
    interface: personal-files
    write:
      - $HOME/.local/share/juju
  config-lxd:
    interface: personal-files
    read:
      - $HOME/snap/lxd/common/config

  dot-aws:
    interface: personal-files
    read:
      - $HOME/.aws

  dot-azure:
    interface: personal-files
    read:
      - $HOME/.azure

  dot-google:
    interface: personal-files
    read:
      - $HOME/.config/gcloud

  dot-kubernetes:
    interface: personal-files
    read:
      - $HOME/.kube

  dot-maas:
    interface: personal-files
    read:
      - $HOME/.maasrc

  dot-oracle:
    interface: personal-files
    read:
      - $HOME/.oci

  dot-openstack:
    interface: personal-files
    read:
      - $HOME/.novarc

// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mockjujuadapter

import (
	"github.com/mark3labs/mcp-go/mcp"
	"github.com/mark3labs/mcp-go/server"
	mock "github.com/stretchr/testify/mock"
)

// NewMockAdapter creates a new instance of MockAdapter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAdapter(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAdapter {
	mock := &MockAdapter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockAdapter is an autogenerated mock type for the Adapter type
type MockAdapter struct {
	mock.Mock
}

type MockAdapter_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAdapter) EXPECT() *MockAdapter_Expecter {
	return &MockAdapter_Expecter{mock: &_m.Mock}
}

// GetTool provides a mock function for the type MockAdapter
func (_mock *MockAdapter) GetTool(name string) (*mcp.Tool, server.ToolHandlerFunc, error) {
	ret := _mock.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for GetTool")
	}

	var r0 *mcp.Tool
	var r1 server.ToolHandlerFunc
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(string) (*mcp.Tool, server.ToolHandlerFunc, error)); ok {
		return returnFunc(name)
	}
	if returnFunc, ok := ret.Get(0).(func(string) *mcp.Tool); ok {
		r0 = returnFunc(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mcp.Tool)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) server.ToolHandlerFunc); ok {
		r1 = returnFunc(name)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(server.ToolHandlerFunc)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(string) error); ok {
		r2 = returnFunc(name)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockAdapter_GetTool_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTool'
type MockAdapter_GetTool_Call struct {
	*mock.Call
}

// GetTool is a helper method to define mock.On call
//   - name string
func (_e *MockAdapter_Expecter) GetTool(name interface{}) *MockAdapter_GetTool_Call {
	return &MockAdapter_GetTool_Call{Call: _e.mock.On("GetTool", name)}
}

func (_c *MockAdapter_GetTool_Call) Run(run func(name string)) *MockAdapter_GetTool_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockAdapter_GetTool_Call) Return(tool *mcp.Tool, toolHandlerFunc server.ToolHandlerFunc, err error) *MockAdapter_GetTool_Call {
	_c.Call.Return(tool, toolHandlerFunc, err)
	return _c
}

func (_c *MockAdapter_GetTool_Call) RunAndReturn(run func(name string) (*mcp.Tool, server.ToolHandlerFunc, error)) *MockAdapter_GetTool_Call {
	_c.Call.Return(run)
	return _c
}

// ToolNames provides a mock function for the type MockAdapter
func (_mock *MockAdapter) ToolNames() []string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for ToolNames")
	}

	var r0 []string
	if returnFunc, ok := ret.Get(0).(func() []string); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	return r0
}

// MockAdapter_ToolNames_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ToolNames'
type MockAdapter_ToolNames_Call struct {
	*mock.Call
}

// ToolNames is a helper method to define mock.On call
func (_e *MockAdapter_Expecter) ToolNames() *MockAdapter_ToolNames_Call {
	return &MockAdapter_ToolNames_Call{Call: _e.mock.On("ToolNames")}
}

func (_c *MockAdapter_ToolNames_Call) Run(run func()) *MockAdapter_ToolNames_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockAdapter_ToolNames_Call) Return(strings []string) *MockAdapter_ToolNames_Call {
	_c.Call.Return(strings)
	return _c
}

func (_c *MockAdapter_ToolNames_Call) RunAndReturn(run func() []string) *MockAdapter_ToolNames_Call {
	_c.Call.Return(run)
	return _c
}

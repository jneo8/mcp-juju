// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mockjujuadapter

import (
	"context"

	"github.com/juju/cmd/v3"
	"github.com/juju/gnuflag"
	mock "github.com/stretchr/testify/mock"
)

// NewMockCommand creates a new instance of MockCommand. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCommand(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCommand {
	mock := &MockCommand{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockCommand is an autogenerated mock type for the Command type
type MockCommand struct {
	mock.Mock
}

type MockCommand_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCommand) EXPECT() *MockCommand_Expecter {
	return &MockCommand_Expecter{mock: &_m.Mock}
}

// Info provides a mock function for the type MockCommand
func (_mock *MockCommand) Info() *cmd.Info {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Info")
	}

	var r0 *cmd.Info
	if returnFunc, ok := ret.Get(0).(func() *cmd.Info); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cmd.Info)
		}
	}
	return r0
}

// MockCommand_Info_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Info'
type MockCommand_Info_Call struct {
	*mock.Call
}

// Info is a helper method to define mock.On call
func (_e *MockCommand_Expecter) Info() *MockCommand_Info_Call {
	return &MockCommand_Info_Call{Call: _e.mock.On("Info")}
}

func (_c *MockCommand_Info_Call) Run(run func()) *MockCommand_Info_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCommand_Info_Call) Return(info *cmd.Info) *MockCommand_Info_Call {
	_c.Call.Return(info)
	return _c
}

func (_c *MockCommand_Info_Call) RunAndReturn(run func() *cmd.Info) *MockCommand_Info_Call {
	_c.Call.Return(run)
	return _c
}

// Init provides a mock function for the type MockCommand
func (_mock *MockCommand) Init(args []string) error {
	ret := _mock.Called(args)

	if len(ret) == 0 {
		panic("no return value specified for Init")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func([]string) error); ok {
		r0 = returnFunc(args)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockCommand_Init_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Init'
type MockCommand_Init_Call struct {
	*mock.Call
}

// Init is a helper method to define mock.On call
//   - args []string
func (_e *MockCommand_Expecter) Init(args interface{}) *MockCommand_Init_Call {
	return &MockCommand_Init_Call{Call: _e.mock.On("Init", args)}
}

func (_c *MockCommand_Init_Call) Run(run func(args []string)) *MockCommand_Init_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 []string
		if args[0] != nil {
			arg0 = args[0].([]string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockCommand_Init_Call) Return(err error) *MockCommand_Init_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockCommand_Init_Call) RunAndReturn(run func(args []string) error) *MockCommand_Init_Call {
	_c.Call.Return(run)
	return _c
}

// Name provides a mock function for the type MockCommand
func (_mock *MockCommand) Name() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Name")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockCommand_Name_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Name'
type MockCommand_Name_Call struct {
	*mock.Call
}

// Name is a helper method to define mock.On call
func (_e *MockCommand_Expecter) Name() *MockCommand_Name_Call {
	return &MockCommand_Name_Call{Call: _e.mock.On("Name")}
}

func (_c *MockCommand_Name_Call) Run(run func()) *MockCommand_Name_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCommand_Name_Call) Return(s string) *MockCommand_Name_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockCommand_Name_Call) RunAndReturn(run func() string) *MockCommand_Name_Call {
	_c.Call.Return(run)
	return _c
}

// Run provides a mock function for the type MockCommand
func (_mock *MockCommand) Run(context1 context.Context) error {
	ret := _mock.Called(context1)

	if len(ret) == 0 {
		panic("no return value specified for Run")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(context1)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockCommand_Run_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Run'
type MockCommand_Run_Call struct {
	*mock.Call
}

// Run is a helper method to define mock.On call
//   - context1 context.Context
func (_e *MockCommand_Expecter) Run(context1 interface{}) *MockCommand_Run_Call {
	return &MockCommand_Run_Call{Call: _e.mock.On("Run", context1)}
}

func (_c *MockCommand_Run_Call) Run(run func(context1 context.Context)) *MockCommand_Run_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockCommand_Run_Call) Return(err error) *MockCommand_Run_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockCommand_Run_Call) RunAndReturn(run func(context1 context.Context) error) *MockCommand_Run_Call {
	_c.Call.Return(run)
	return _c
}

// RunWithOutput provides a mock function for the type MockCommand
func (_mock *MockCommand) RunWithOutput(context1 context.Context) (string, string, error) {
	ret := _mock.Called(context1)

	if len(ret) == 0 {
		panic("no return value specified for RunWithOutput")
	}

	var r0 string
	var r1 string
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (string, string, error)); ok {
		return returnFunc(context1)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) string); ok {
		r0 = returnFunc(context1)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) string); ok {
		r1 = returnFunc(context1)
	} else {
		r1 = ret.Get(1).(string)
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context) error); ok {
		r2 = returnFunc(context1)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockCommand_RunWithOutput_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RunWithOutput'
type MockCommand_RunWithOutput_Call struct {
	*mock.Call
}

// RunWithOutput is a helper method to define mock.On call
//   - context1 context.Context
func (_e *MockCommand_Expecter) RunWithOutput(context1 interface{}) *MockCommand_RunWithOutput_Call {
	return &MockCommand_RunWithOutput_Call{Call: _e.mock.On("RunWithOutput", context1)}
}

func (_c *MockCommand_RunWithOutput_Call) Run(run func(context1 context.Context)) *MockCommand_RunWithOutput_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockCommand_RunWithOutput_Call) Return(s string, s1 string, err error) *MockCommand_RunWithOutput_Call {
	_c.Call.Return(s, s1, err)
	return _c
}

func (_c *MockCommand_RunWithOutput_Call) RunAndReturn(run func(context1 context.Context) (string, string, error)) *MockCommand_RunWithOutput_Call {
	_c.Call.Return(run)
	return _c
}

// SetFlags provides a mock function for the type MockCommand
func (_mock *MockCommand) SetFlags(f *gnuflag.FlagSet) {
	_mock.Called(f)
	return
}

// MockCommand_SetFlags_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetFlags'
type MockCommand_SetFlags_Call struct {
	*mock.Call
}

// SetFlags is a helper method to define mock.On call
//   - f *gnuflag.FlagSet
func (_e *MockCommand_Expecter) SetFlags(f interface{}) *MockCommand_SetFlags_Call {
	return &MockCommand_SetFlags_Call{Call: _e.mock.On("SetFlags", f)}
}

func (_c *MockCommand_SetFlags_Call) Run(run func(f *gnuflag.FlagSet)) *MockCommand_SetFlags_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *gnuflag.FlagSet
		if args[0] != nil {
			arg0 = args[0].(*gnuflag.FlagSet)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockCommand_SetFlags_Call) Return() *MockCommand_SetFlags_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockCommand_SetFlags_Call) RunAndReturn(run func(f *gnuflag.FlagSet)) *MockCommand_SetFlags_Call {
	_c.Run(run)
	return _c
}

// ToolDescription provides a mock function for the type MockCommand
func (_mock *MockCommand) ToolDescription() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for ToolDescription")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockCommand_ToolDescription_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ToolDescription'
type MockCommand_ToolDescription_Call struct {
	*mock.Call
}

// ToolDescription is a helper method to define mock.On call
func (_e *MockCommand_Expecter) ToolDescription() *MockCommand_ToolDescription_Call {
	return &MockCommand_ToolDescription_Call{Call: _e.mock.On("ToolDescription")}
}

func (_c *MockCommand_ToolDescription_Call) Run(run func()) *MockCommand_ToolDescription_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCommand_ToolDescription_Call) Return(s string) *MockCommand_ToolDescription_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockCommand_ToolDescription_Call) RunAndReturn(run func() string) *MockCommand_ToolDescription_Call {
	_c.Call.Return(run)
	return _c
}

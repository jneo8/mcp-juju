// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mockjujuadapter

import (
	"github.com/jneo8/mcp-juju/pkg/jujuadapter"
	mock "github.com/stretchr/testify/mock"
)

// NewMockCommandFactory creates a new instance of MockCommandFactory. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCommandFactory(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCommandFactory {
	mock := &MockCommandFactory{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockCommandFactory is an autogenerated mock type for the CommandFactory type
type MockCommandFactory struct {
	mock.Mock
}

type MockCommandFactory_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCommandFactory) EXPECT() *MockCommandFactory_Expecter {
	return &MockCommandFactory_Expecter{mock: &_m.Mock}
}

// GetCommand provides a mock function for the type MockCommandFactory
func (_mock *MockCommandFactory) GetCommand(name string) (jujuadapter.Command, error) {
	ret := _mock.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for GetCommand")
	}

	var r0 jujuadapter.Command
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (jujuadapter.Command, error)); ok {
		return returnFunc(name)
	}
	if returnFunc, ok := ret.Get(0).(func(string) jujuadapter.Command); ok {
		r0 = returnFunc(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(jujuadapter.Command)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(name)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCommandFactory_GetCommand_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCommand'
type MockCommandFactory_GetCommand_Call struct {
	*mock.Call
}

// GetCommand is a helper method to define mock.On call
//   - name string
func (_e *MockCommandFactory_Expecter) GetCommand(name interface{}) *MockCommandFactory_GetCommand_Call {
	return &MockCommandFactory_GetCommand_Call{Call: _e.mock.On("GetCommand", name)}
}

func (_c *MockCommandFactory_GetCommand_Call) Run(run func(name string)) *MockCommandFactory_GetCommand_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockCommandFactory_GetCommand_Call) Return(command jujuadapter.Command, err error) *MockCommandFactory_GetCommand_Call {
	_c.Call.Return(command, err)
	return _c
}

func (_c *MockCommandFactory_GetCommand_Call) RunAndReturn(run func(name string) (jujuadapter.Command, error)) *MockCommandFactory_GetCommand_Call {
	_c.Call.Return(run)
	return _c
}
